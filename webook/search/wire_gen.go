// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/Anwenya/GeekTime/webook/pkg/grpcx"
	"github.com/Anwenya/GeekTime/webook/search/events"
	"github.com/Anwenya/GeekTime/webook/search/grpc"
	"github.com/Anwenya/GeekTime/webook/search/ioc"
	"github.com/Anwenya/GeekTime/webook/search/repository"
	"github.com/Anwenya/GeekTime/webook/search/repository/dao"
	"github.com/Anwenya/GeekTime/webook/search/service"
)

// Injectors from wire.go:

func Init() *App {
	loggerV1 := ioc.InitLogger()
	client := ioc.InitES(loggerV1)
	userDAO := dao.NewUserEsDao(client)
	userRepository := repository.NewUserRepository(userDAO)
	articleDAO := dao.NewArticleElasticDao(client)
	tagDAO := dao.NewTagEsDao(client)
	articleRepository := repository.NewArticleRepository(articleDAO, tagDAO)
	searchService := service.NewSearchService(userRepository, articleRepository)
	searchServiceServer := grpc.NewSearchServiceServer(searchService)
	anyDAO := dao.NewAnyEsDao(client)
	anyRepository := repository.NewAnyRepository(anyDAO)
	syncService := service.NewSyncService(userRepository, articleRepository, anyRepository)
	syncServiceServer := grpc.NewSyncServiceServer(syncService)
	clientv3Client := ioc.InitEtcdClient(loggerV1)
	server := ioc.InitGrpcxServer(searchServiceServer, syncServiceServer, clientv3Client, loggerV1)
	saramaClient := ioc.InitKafka(loggerV1)
	articleConsumer := events.NewArticleConsumer(saramaClient, loggerV1, syncService)
	userConsumer := events.NewUserConsumer(saramaClient, loggerV1, syncService)
	v := ioc.InitConsumer(articleConsumer, userConsumer)
	app := &App{
		server:    server,
		consumers: v,
	}
	return app
}

// wire.go:

type App struct {
	server    *grpcx.Server
	consumers []events.Consumer
}

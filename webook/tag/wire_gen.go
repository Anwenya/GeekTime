// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/Anwenya/GeekTime/webook/pkg/grpcx"
	"github.com/Anwenya/GeekTime/webook/tag/events"
	"github.com/Anwenya/GeekTime/webook/tag/grpc"
	"github.com/Anwenya/GeekTime/webook/tag/ioc"
	"github.com/Anwenya/GeekTime/webook/tag/repository"
	"github.com/Anwenya/GeekTime/webook/tag/repository/cache"
	"github.com/Anwenya/GeekTime/webook/tag/repository/dao"
	"github.com/Anwenya/GeekTime/webook/tag/service"
)

// Injectors from wire.go:

func Init() *App {
	loggerV1 := ioc.InitLogger()
	db := ioc.InitDB(loggerV1)
	tagDAO := dao.NewTagGormDao(db)
	cmdable := ioc.InitRedis(loggerV1)
	tagCache := cache.NewTagRedisCache(cmdable)
	tagRepository := repository.NewTagCachedRepository(tagDAO, tagCache, loggerV1)
	client := ioc.InitKafka(loggerV1)
	producer := events.NewSaramaSyncProducer(client)
	tagService := service.NewTagService(tagRepository, loggerV1, producer)
	tagServiceServer := grpc.NewTagServiceServer(tagService)
	clientv3Client := ioc.InitEtcdClient(loggerV1)
	server := ioc.InitGrpcxServer(tagServiceServer, clientv3Client, loggerV1)
	app := &App{
		server: server,
	}
	return app
}

// wire.go:

type App struct {
	server *grpcx.Server
}

// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/Anwenya/GeekTime/webook/account/grpc"
	"github.com/Anwenya/GeekTime/webook/account/ioc"
	"github.com/Anwenya/GeekTime/webook/account/repository"
	"github.com/Anwenya/GeekTime/webook/account/repository/cache"
	"github.com/Anwenya/GeekTime/webook/account/repository/dao"
	"github.com/Anwenya/GeekTime/webook/account/service"
	"github.com/Anwenya/GeekTime/webook/pkg/ginx"
	"github.com/Anwenya/GeekTime/webook/pkg/grpcx"
	"github.com/Anwenya/GeekTime/webook/pkg/saramax"
)

// Injectors from wire.go:

func Init() *App {
	loggerV1 := ioc.InitLogger()
	db := ioc.InitDB(loggerV1)
	accountDAO := dao.NewAccountGORMDAO(db)
	cmdable := ioc.InitRedis(loggerV1)
	accountCache := cache.NewAccountRedisCache(cmdable)
	accountRepository := repository.NewAccountRepository(accountDAO, accountCache)
	accountService := service.NewAccountService(accountRepository, loggerV1)
	accountServiceServer := grpc.NewAccountServiceServer(accountService)
	client := ioc.InitEtcdClient(loggerV1)
	server := ioc.InitGrpcxServer(accountServiceServer, client, loggerV1)
	app := &App{
		server: server,
	}
	return app
}

// wire.go:

type App struct {
	server      *grpcx.Server
	consumers   []saramax.Consumer
	adminServer *ginx.Server
}

// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/Anwenya/GeekTime/webook/pkg/grpcx"
	"github.com/Anwenya/GeekTime/webook/pkg/saramax"
	"github.com/Anwenya/GeekTime/webook/reward/grpc"
	"github.com/Anwenya/GeekTime/webook/reward/ioc"
	"github.com/Anwenya/GeekTime/webook/reward/repository"
	"github.com/Anwenya/GeekTime/webook/reward/repository/cache"
	"github.com/Anwenya/GeekTime/webook/reward/repository/dao"
	"github.com/Anwenya/GeekTime/webook/reward/service"
)

// Injectors from wire.go:

func Init() *App {
	loggerV1 := ioc.InitLogger()
	client := ioc.InitEtcdClient(loggerV1)
	wechatPaymentServiceClient := ioc.InitPaymentClient(loggerV1, client)
	accountServiceClient := ioc.InitAccountClient(loggerV1, client)
	db := ioc.InitDB(loggerV1)
	rewardDAO := dao.NewRewardGORMDAO(db)
	cmdable := ioc.InitRedis(loggerV1)
	rewardCache := cache.NewRewardRedisCache(cmdable)
	rewardRepository := repository.NewRewardRepository(rewardDAO, rewardCache)
	rewardService := service.NewWechatNativeRewardService(wechatPaymentServiceClient, accountServiceClient, rewardRepository, loggerV1)
	rewardServiceServer := grpc.NewRewardServiceServer(rewardService)
	server := ioc.InitGrpcxServer(rewardServiceServer, client, loggerV1)
	saramaClient := ioc.InitKafka(loggerV1)
	consumer := ioc.InitConsumer(saramaClient, rewardService, loggerV1)
	app := &App{
		GRPCServer: server,
		Consumer:   consumer,
	}
	return app
}

// wire.go:

type App struct {
	GRPCServer *grpcx.Server
	Consumer   saramax.Consumer
}
